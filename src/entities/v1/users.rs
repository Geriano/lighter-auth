//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[cfg_attr(feature = "postgres", sea_orm(schema_name = "v1"))]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub email_verified_at: Option<DateTime>,
    #[sea_orm(unique)]
    pub username: String,
    pub password: String,
    pub profile_photo_id: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::permission_user::Entity")]
    PermissionUser,
    #[sea_orm(has_many = "super::role_user::Entity")]
    RoleUser,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
}

impl Related<super::permission_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionUser.def()
    }
}

impl Related<super::role_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoleUser.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
